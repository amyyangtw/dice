{"version":3,"sources":["dice.js","RollDice.js","App.js","serviceWorker.js","index.js"],"names":["Dice","className","this","props","face","rolling","Component","RollDice","state","dice1","dice2","roll","bind","newDice1","side","Math","floor","random","length","newDice2","setState","setTimeout","onClick","disabled","defaultProps","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"6SASeA,G,uLAJP,OAAO,uBAAGC,UAAS,2BAAwBC,KAAKC,MAAMC,KAAnC,mBAAkDF,KAAKC,MAAME,QAAQ,UAAU,KAA3F,S,GAFIC,cCCbC,G,kBAIF,WAAYJ,GAAO,IAAD,8BACd,4CAAMA,KACDK,MAAQ,CAACC,MAAM,MAAOC,MAAM,MAAML,SAAQ,GAE/C,EAAKM,KAAO,EAAKA,KAAKC,KAAV,gBAJE,E,oEAMX,IAAD,OACIC,EAAWX,KAAKC,MAAMW,KACxBC,KAAKC,MAAMD,KAAKE,SAAWf,KAAKC,MAAMW,KAAKI,SAEzCC,EAAWjB,KAAKC,MAAMW,KACxBC,KAAKC,MAAMD,KAAKE,SAAWf,KAAKC,MAAMW,KAAKI,SAE/ChB,KAAKkB,SAAS,CAACX,MAAMI,EAAUH,MAAMS,EAASd,SAAQ,IAGtDgB,YAAW,WACP,EAAKD,SAAS,CAACf,SAAQ,MACxB,O,+BAGH,OACI,yBAAMJ,UAAY,YACd,yBAAKA,UAAU,sBACX,kBAAC,EAAD,CAAMG,KAAMF,KAAKM,MAAMC,MAAOJ,QAASH,KAAKM,MAAMH,UAClD,kBAAC,EAAD,CAAMD,KAAMF,KAAKM,MAAME,MAAOL,QAASH,KAAKM,MAAMH,WAElD,4BAAQiB,QAASpB,KAAKS,KAAMY,SAAUrB,KAAKM,MAAMH,SAC5CH,KAAKM,MAAMH,QAAQ,aAAa,mB,GAhClCC,cAAjBC,EACKiB,aAAa,CAChBV,KAAK,CAAC,MAAO,MAAO,QAAS,OAAQ,OAAQ,QAsCtCP,Q,MC9BAkB,MARf,WACE,OACE,yBAAKxB,UAAU,OACb,kBAAC,EAAD,QCGcyB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.4ec9bfcd.chunk.js","sourcesContent":["import React,{Component} from 'react';\nimport './dice.css'\n\nclass Dice extends Component{\n    render(){\n        return <i className = {`dice fas fa-dice-${this.props.face} fa-10x ${this.props.rolling?'shaking':''}`} > </i>\n    }\n}\n\nexport default Dice;","import React , {Component} from 'react';\nimport Dice from './dice';\nimport './RollDice.css'\n\nclass RollDice extends Component{\n    static defaultProps={\n        side:[\"one\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n    };\n    constructor(props){\n        super(props);\n        this.state = {dice1:'one', dice2:'two',rolling:false};\n        //this binding is necessary to make \"this\" work in the callback\n        this.roll = this.roll.bind(this);\n    };\n    roll(){\n        const newDice1 = this.props.side[\n            Math.floor(Math.random() * this.props.side.length)\n        ];\n        const newDice2 = this.props.side[\n            Math.floor(Math.random() * this.props.side.length)\n        ];\n        this.setState({dice1:newDice1, dice2:newDice2,rolling:true});\n\n        //wait one second , then said roll dice\n        setTimeout(() =>{\n            this.setState({rolling:false});\n        }, 1000);\n    }\n    render(){\n        return (\n            < div className = \"RollDice\" >\n                <div className=\"RollDice-container\">\n                    <Dice face={this.state.dice1} rolling={this.state.rolling}/>\n                    <Dice face={this.state.dice2} rolling={this.state.rolling}/>\n                </div>\n                    <button onClick={this.roll} disabled={this.state.rolling}>\n                        {this.state.rolling?'Rolling...':'Roll Dice!'}\n                    </button>\n                \n            </div>\n        )\n    };\n}\n\nexport default RollDice;\n","import React from 'react';\n// import Dice from './dice.js';\nimport RollDice from './RollDice';\n\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <RollDice/>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}